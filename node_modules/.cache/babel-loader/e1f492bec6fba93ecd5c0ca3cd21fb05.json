{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport circle from \"./circle.png\";\nimport x from \"./x.png\";\nexport default {\n  data() {\n    return {\n      id: 1,\n      isPlayer1: false,\n      img: \"\",\n      img1: circle,\n      img2: x,\n      numTurns: 1\n    };\n  },\n\n  methods: {\n    setImage() {\n      if (this.isPlayer1) {\n        this.img = this.img1;\n      } else {\n        this.img = this.img2;\n      }\n    },\n\n    checkLine(i, difference) {\n      let pos = i;\n      let arr = [];\n      let boxNode;\n      let src;\n      let count = 0;\n      /* checks if current and higher boxes have the current players image */\n\n      while (pos < 10 && count < 3) {\n        boxNode = document.getElementById(pos);\n        src = boxNode.innerHTML;\n        console.log(\"HERE\");\n        console.log(src.includes(this.img));\n\n        if (src.includes(this.img)) {\n          arr.push(true);\n        } else {\n          arr.push(false);\n        }\n\n        pos += difference;\n        count += 1;\n      }\n\n      count = 0;\n      pos = i;\n\n      while (pos < 10 && count < 3) {\n        boxNode = document.getElementById(pos);\n        src = boxNode.innerHTML;\n        console.log(\"HERE\");\n        console.log(src.includes(this.img));\n\n        if (src.includes(this.img)) {\n          arr.push(true);\n        } else {\n          arr.push(false);\n        }\n\n        pos -= difference;\n        count += 1;\n      }\n    },\n\n    checkDiag(i) {},\n\n    checkWin(i) {\n      let isRowWin = this.checkLine(i, 1);\n      let isColWin = this.checkLine(i, 3);\n      let isDiagWin = this.checkDiag(i);\n\n      if (isRowWin || isColWin || isDiagWin) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    announceWinner() {\n      console.log(this.isPlayer1);\n    },\n\n    fillPlayerSign(i) {\n      this.setImage();\n      let imgId = 'img' + i;\n      let imgNode = document.getElementById(imgId);\n      let boxNode = document.getElementById(i);\n      let existingImg = boxNode.contains(imgNode);\n\n      if (existingImg === false) {\n        /* if there is no previous image in the box, add an image */\n        let newImg = document.createElement(\"img\");\n        newImg.src = this.img;\n        newImg.style.width = '100%';\n        newImg.id = imgId;\n        boxNode.appendChild(newImg);\n\n        if (this.numTurns > 4) {\n          if (this.checkWin(i)) {\n            this.announceWinner();\n          }\n        }\n\n        this.numTurns += 1;\n        this.isPlayer1 = !this.isPlayer1;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["circle","x","data","id","isPlayer1","img","img1","img2","numTurns","methods","setImage","checkLine","i","difference","pos","arr","boxNode","src","count","document","getElementById","innerHTML","console","log","includes","push","checkDiag","checkWin","isRowWin","isColWin","isDiagWin","announceWinner","fillPlayerSign","imgId","imgNode","existingImg","contains","newImg","createElement","style","width","appendChild"],"sourceRoot":"","sources":["/Users/user/Documents/tic-tac-toe/src/components/Boxes.vue"],"sourcesContent":["<template>\n    <section class=\"game--container\" id=\"tester\">\n        <div v-for=\"i in 9\"  :key=\"i\">\n            <div :id=\"i\" class=\"cell\" @click=\"fillPlayerSign(i)\">\n            </div>\n        </div> \n    </section>\n    \n</template>\n  \n  <script>\n    import circle from \"./circle.png\"\n    import x from \"./x.png\"\n\n    export default {\n        data () {\n            return {\n                id: 1,\n                isPlayer1: false,\n                img: \"\",\n                img1: circle,\n                img2: x,\n                numTurns: 1\n            }\n            \n        },\n        methods: {\n            setImage() {\n                if (this.isPlayer1) {\n                    this.img = this.img1\n                } else {\n                    this.img = this.img2\n                }\n            }, \n            checkLine(i, difference) {\n                let pos = i\n                let arr = []\n                let boxNode\n                let src\n                let count = 0\n\n                /* checks if current and higher boxes have the current players image */\n                while (pos < 10 && count < 3) {\n                    boxNode = document.getElementById(pos)\n                    src = boxNode.innerHTML\n                    console.log(\"HERE\")\n                    console.log(src.includes(this.img))\n                    if (src.includes(this.img)) {\n                        arr.push(true)\n                    } else {\n                        arr.push(false)\n                    }\n\n                    pos += difference\n                    count += 1\n                }\n\n                count = 0\n                pos = i\n\n                while (pos < 10 && count < 3) {\n                    boxNode = document.getElementById(pos)\n                    src = boxNode.innerHTML\n                    console.log(\"HERE\")\n                    console.log(src.includes(this.img))\n                    if (src.includes(this.img)) {\n                        arr.push(true)\n                    } else {\n                        arr.push(false)\n                    }\n\n                    pos -= difference\n                    count += 1\n                }\n\n            },\n            checkDiag(i) {\n\n            },\n            checkWin(i) {\n                let isRowWin = this.checkLine(i, 1)\n                let isColWin = this.checkLine(i, 3)\n                let isDiagWin = this.checkDiag(i)\n                if (isRowWin || isColWin || isDiagWin) {\n                    return true\n                } else {\n                    return false\n                }\n            }, \n            announceWinner() {\n                console.log(this.isPlayer1)\n            },\n            fillPlayerSign(i) {\n                \n                this.setImage()\n                let imgId = 'img'+ i\n                let imgNode = document.getElementById(imgId)\n                let boxNode = document.getElementById(i)\n                let existingImg = boxNode.contains(imgNode)\n\n                if (existingImg === false) {\n                    /* if there is no previous image in the box, add an image */\n                    let newImg = document.createElement(\"img\")\n                    newImg.src = this.img\n                    newImg.style.width = '100%'\n                    newImg.id = imgId\n                    boxNode.appendChild(newImg)\n                    \n                    if (this.numTurns > 4) {\n                        if (this.checkWin(i)) {\n                        this.announceWinner()\n                        }\n                    }\n                    \n                    this.numTurns += 1\n                    this.isPlayer1 = !this.isPlayer1\n                }\n            }\n        }\n    }\n    </script>\n    \n  <!-- Add \"scoped\" attribute to limit CSS to this component only -->\n  <style scoped>\n\n    .game--container {\n        display: grid;\n        grid-template-columns: repeat(3, auto);\n        margin-top: 5%;\n        width: 60%;\n        margin-right: auto;\n        margin-left: auto;\n\n    }\n    .cell {\n\n        aspect-ratio: 1 / 1;\n        width: 9vh;\n        box-shadow: 0 0 0 1px #333333;\n        border: 1px solid #333333;\n        cursor: pointer;\n    }\n\n  </style>\n  "]},"metadata":{},"sourceType":"module"}