{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-3a5cab39\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"game--container\",\n  id: \"tester\"\n};\nconst _hoisted_2 = [\"id\", \"onClick\"];\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"section\", _hoisted_1, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(9, i => {\n    return _createElementVNode(\"div\", {\n      key: i\n    }, [_createElementVNode(\"div\", {\n      id: i,\n      class: \"cell\",\n      onClick: $event => $options.fillPlayerSign(i)\n    }, null, 8\n    /* PROPS */\n    , _hoisted_2)]);\n  }), 64\n  /* STABLE_FRAGMENT */\n  ))]), $data.isWin ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"h5\", null, \" Congratulations! \" + _toDisplayString($data.winningPlayer) + \" is the winner! \", 1\n  /* TEXT */\n  )])) : _createCommentVNode(\"v-if\", true)], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;;EACaA,KAAK,EAAC;EAAkBC,EAAE,EAAC;;;;;;;6DAApCC,oBAKU,SALV,cAKU,gBAJNC,oBAGMC,SAHN,EAGM,IAHN,EAGMC,YAHW,CAGX,EAHMC,CAAM,IAAL;WAAbJ,oBAGM,KAHN,EAGM;MAHgBK,GAAG,EAAED;IAGrB,CAHN,EAA4B,CACxBJ,oBACM,KADN,EACM;MADAD,EAAE,EAAEK,CACJ;MADON,KAAK,EAAC,MACb;MADqBQ,OAAK,YAAEC,wBAAeH,CAAf;IAC5B,CADN;;IAAA,aADwB,CAA5B;GAGM,CAHN;;EAAA,CAIM,EALV,GAMWI,6BAAXP,oBAEM,KAFN,EAEMQ,UAFN,EAEM,CADFT,oBAA4D,IAA5D,EAA4D,IAA5D,EAAI,uBAAkBU,iBAAEF,mBAAF,CAAlB,GAAmC,kBAAvC,EAAuD;EAAA;EAAvD,CACE,CAFN","names":["class","id","_createElementVNode","_createElementBlock","_Fragment","_renderList","i","key","onClick","$options","$data","_hoisted_3","_toDisplayString"],"sourceRoot":"","sources":["/Users/user/Documents/tic-tac-toe/src/components/Boxes.vue"],"sourcesContent":["<template>\n    <section class=\"game--container\" id=\"tester\">\n        <div v-for=\"i in 9\"  :key=\"i\">\n            <div :id=\"i\" class=\"cell\" @click=\"fillPlayerSign(i)\">\n            </div>\n        </div> \n    </section>\n    <div v-if=\"isWin\">\n        <h5> Congratulations! {{winningPlayer}} is the winner! </h5>\n    </div>\n    \n    \n</template>\n  \n  <script>\n    import circle from \"./circle.png\"\n    import x from \"./x.png\"\n\n    export default {\n        data () {\n            return {\n                id: 1,\n                isPlayer1: true,\n                img: \"\",\n                img1: circle,\n                img2: x,\n                numTurns: 1,\n                isWin: false,\n                winningPlayer: \"\"\n            }\n            \n        },\n        methods: {\n            setImage() {\n                if (this.isPlayer1) {\n                    this.img = this.img1\n                } else {\n                    this.img = this.img2\n                }\n            }, \n            checkLine(i, difference, limit) {\n                let pos = i\n                let arr = []\n                let boxNode\n                let src\n                let count = 0\n\n                /* checks if current and higher boxes have the current players image */\n                while (pos < limit && pos < 10 && count < 3) {\n                    boxNode = document.getElementById(pos)\n                    src = boxNode.innerHTML\n\n                    if (src.includes(this.img)) {\n                        arr.push(true)\n                    } else {\n                        arr.push(false) \n                    }\n\n                    pos += difference\n                    count += 1\n                }\n\n                pos = i - difference\n\n                while (count < 3 && pos > 0) {\n                    boxNode = document.getElementById(pos)\n                    src = boxNode.innerHTML\n\n                    if (src.includes(this.img)) {\n                        arr.push(true)\n                    } else {\n                        arr.push(false) \n                    }\n\n                    pos -= difference\n                    count += 1\n                }\n\n                if (arr.includes(false)){\n                        return false\n                } else {\n                    return true\n                }\n            },\n            checkDiag(i) {\n                let rightDiag = [3,5,7]\n                let leftDiag = [1,5,9]\n                let isRightWin = false\n                let isLeftWin = false\n                let limit = 10\n                let rightLim = 8\n                let rightDiff = 2\n                let leftDiff = 4\n\n                if (rightDiag.includes(i)) {\n                    isRightWin = this.checkLine(i, rightDiff, rightLim)\n                }\n\n                if (leftDiag.includes(i)) {\n                    isLeftWin = this.checkLine(i, leftDiff, limit)\n                }\n\n                console.log(\"diag\")\n                console.log(isRightWin || isLeftWin)\n                return isRightWin || isLeftWin\n\n            },\n            checkWin(i) { \n                let rowLimit = i + (i*5)%4\n                console.log(\"LIMIT\")\n                console.log(rowLimit) \n                let colLimit = i + 7\n\n                let isRowWin = this.checkLine(i, 1, rowLimit)\n                let isColWin = this.checkLine(i, 3, colLimit)\n                let isDiagWin = this.checkDiag(i)\n                console.log(\"is win\")\n                console.log(isRowWin || isColWin || isDiagWin)\n                if (isRowWin || isColWin || isDiagWin) {\n                    console.log(\"THERES A WIN\")\n                    return true\n                } else {\n                    console.log(\"Theres a lose \")\n                    return false\n                }\n            }, \n            announceWinner() {\n                this.isWin = true\n                if (this.isPlayer1) {\n                    this.winningPlayer = \"Player 1\"\n                } else {\n                    this.winningPlayer = \"Player 2\"\n                }\n            },\n            fillPlayerSign(i) {\n                if (this.isWin === false ) {\n                    this.setImage()\n                    let imgId = 'img'+ i\n                    let imgNode = document.getElementById(imgId)\n                    let boxNode = document.getElementById(i)\n                    let existingImg = boxNode.contains(imgNode)\n\n                    if (existingImg === false) {\n                        /* if there is no previous image in the box, add an image */\n                        let newImg = document.createElement(\"img\")\n                        newImg.src = this.img\n                        newImg.style.width = '100%'\n                        newImg.id = imgId\n                        boxNode.appendChild(newImg)\n                        \n                        if (this.numTurns > 4) {                            \n                            if (this.checkWin(i)) {\n                                this.announceWinner()\n                            }\n                        }\n                        \n                        this.numTurns += 1\n                        this.isPlayer1 = !this.isPlayer1\n                        console.log(this.isPlayer1)\n                    }\n                }\n                \n            }\n        }\n    }\n    </script>\n    \n  <!-- Add \"scoped\" attribute to limit CSS to this component only -->\n  <style scoped>\n\n    .game--container {\n        display: grid;\n        grid-template-columns: repeat(3, auto);\n        margin-top: 5%;\n        width: 60%;\n        margin-right: auto;\n        margin-left: auto;\n\n    }\n    .cell {\n\n        aspect-ratio: 1 / 1;\n        width: 9vh;\n        box-shadow: 0 0 0 1px #333333;\n        border: 1px solid #333333;\n        cursor: pointer;\n    }\n    h5 {\n        text-align: center;\n        padding-top: 3%;\n    }\n\n  </style>\n  "]},"metadata":{},"sourceType":"module"}