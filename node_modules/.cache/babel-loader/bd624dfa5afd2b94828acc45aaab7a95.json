{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport circle from \"./circle.png\";\nimport x from \"./x.png\";\nexport default {\n  data() {\n    return {\n      id: 1,\n      isPlayer1: true,\n      img: \"\",\n      img1: circle,\n      img2: x,\n      numTurns: 1,\n      isWin: false,\n      winningPlayer: \"\",\n      isTie: false\n    };\n  },\n\n  methods: {\n    setImage() {\n      if (this.isPlayer1) {\n        this.img = this.img1;\n      } else {\n        this.img = this.img2;\n      }\n    },\n\n    checkLine(i, difference, limit) {\n      let pos = i;\n      let arr = [];\n      let boxNode;\n      let src;\n      let count = 0;\n      /* checks if current and higher boxes have the current players image */\n\n      while (pos < limit && pos < 10 && count < 3) {\n        boxNode = document.getElementById(pos);\n        src = boxNode.innerHTML;\n\n        if (src.includes(this.img)) {\n          arr.push(true);\n        } else {\n          arr.push(false);\n        }\n\n        pos += difference;\n        count += 1;\n      }\n\n      pos = i - difference;\n\n      while (count < 3 && pos > 0) {\n        boxNode = document.getElementById(pos);\n        src = boxNode.innerHTML;\n\n        if (src.includes(this.img)) {\n          arr.push(true);\n        } else {\n          arr.push(false);\n        }\n\n        pos -= difference;\n        count += 1;\n      }\n\n      if (arr.includes(false)) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n\n    checkDiag(i) {\n      let rightDiag = [3, 5, 7];\n      let leftDiag = [1, 5, 9];\n      let isRightWin = false;\n      let isLeftWin = false;\n      let limit = 10;\n      let rightLim = 8;\n      let rightDiff = 2;\n      let leftDiff = 4;\n\n      if (rightDiag.includes(i)) {\n        isRightWin = this.checkLine(i, rightDiff, rightLim);\n      }\n\n      if (leftDiag.includes(i)) {\n        isLeftWin = this.checkLine(i, leftDiff, limit);\n      }\n\n      return isRightWin || isLeftWin;\n    },\n\n    checkWin(i) {\n      let rowLimit = i + i * 5 % 3 + 1;\n      let colLimit = i + 7;\n      let isRowWin = this.checkLine(i, 1, rowLimit);\n      let isColWin = this.checkLine(i, 3, colLimit);\n      let isDiagWin = this.checkDiag(i);\n\n      if (isRowWin || isColWin || isDiagWin) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    announceWinner() {\n      this.isWin = true;\n\n      if (this.isPlayer1) {\n        this.winningPlayer = \"Player 1\";\n      } else {\n        this.winningPlayer = \"Player 2\";\n      }\n    },\n\n    showTieMessage() {\n      this.isTie = true;\n      let messageNode = document.getElementById(\"finalMessage\");\n      let text = document.createElement(\"p\");\n      text.innerHTML = \"TEST\";\n      messageNode.appendChild(text);\n    },\n\n    fillPlayerSign(i) {\n      console.log(this.numTurns);\n\n      if (this.isWin === false && this.numTurns < 10) {\n        this.setImage();\n        let imgId = 'img' + i;\n        let imgNode = document.getElementById(imgId);\n        let boxNode = document.getElementById(i);\n        let existingImg = boxNode.contains(imgNode);\n\n        if (existingImg === false) {\n          /* if there is no previous image in the box, add an image */\n          let newImg = document.createElement(\"img\");\n          newImg.src = this.img;\n          newImg.style.width = '100%';\n          newImg.id = imgId;\n          boxNode.appendChild(newImg);\n\n          if (this.numTurns > 4) {\n            if (this.checkWin(i)) {\n              this.announceWinner();\n            }\n\n            if (this.isWin === false && this.numTurns === 9) {\n              this.showTieMessage();\n            }\n          }\n\n          this.numTurns += 1;\n          this.isPlayer1 = !this.isPlayer1;\n        }\n      } else if (this.numTurns == 10) {\n        console.log(\"HERE\");\n        this.showTieMessage();\n      } else {\n        console.log(\"TEST\");\n        console.log(this.numTurns);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["circle","x","data","id","isPlayer1","img","img1","img2","numTurns","isWin","winningPlayer","isTie","methods","setImage","checkLine","i","difference","limit","pos","arr","boxNode","src","count","document","getElementById","innerHTML","includes","push","checkDiag","rightDiag","leftDiag","isRightWin","isLeftWin","rightLim","rightDiff","leftDiff","checkWin","rowLimit","colLimit","isRowWin","isColWin","isDiagWin","announceWinner","showTieMessage","messageNode","text","createElement","appendChild","fillPlayerSign","console","log","imgId","imgNode","existingImg","contains","newImg","style","width"],"sourceRoot":"","sources":["/Users/user/Documents/tic-tac-toe/src/components/Boxes.vue"],"sourcesContent":["<template>\n    <section class=\"game--container\">\n        <div v-for=\"i in 9\"  :key=\"i\" id=\"test\">\n            <div :id=\"i\" class=\"cell\" @click=\"fillPlayerSign(i)\">\n            </div>\n        </div> \n    </section>\n    <div>\n        <div v-if=\"isWin\">\n            <h5> Congratulations! {{winningPlayer}} is the winner! </h5>\n            <button type=\"button\" class=\"btn btn-primary\" id=\"button\"> Play Again </button>\n        </div>\n        \n        <h5 v-else-if=\"isTie\"> Player 1 and Player 2 tied!  </h5>\n        <h5 v-else> {{isPlayer1 ? 'Player 1' : 'Player 2'}}'s turn </h5>\n    </div>\n    \n    \n    \n</template>\n  \n  <script>\n    import circle from \"./circle.png\"\n    import x from \"./x.png\"\n\n    export default {\n        data () {\n            return {\n                id: 1,\n                isPlayer1: true,\n                img: \"\",\n                img1: circle,\n                img2: x,\n                numTurns: 1,\n                isWin: false,\n                winningPlayer: \"\",\n                isTie: false\n            }\n            \n        },\n        methods: {\n            setImage() {\n                if (this.isPlayer1) {\n                    this.img = this.img1\n                } else {\n                    this.img = this.img2\n                }\n            }, \n            checkLine(i, difference, limit) {\n                let pos = i\n                let arr = []\n                let boxNode\n                let src\n                let count = 0\n\n                /* checks if current and higher boxes have the current players image */\n                while (pos < limit && pos < 10 && count < 3) {\n                    boxNode = document.getElementById(pos)\n                    src = boxNode.innerHTML\n\n                    if (src.includes(this.img)) {\n                        arr.push(true)\n                    } else {\n                        arr.push(false) \n                    }\n\n                    pos += difference\n                    count += 1\n                }\n\n                pos = i - difference\n\n                while (count < 3 && pos > 0) {\n                    boxNode = document.getElementById(pos)\n                    src = boxNode.innerHTML\n\n                    if (src.includes(this.img)) {\n                        arr.push(true)\n                    } else {\n                        arr.push(false) \n                    }\n\n                    pos -= difference\n                    count += 1\n                }\n\n                if (arr.includes(false)){\n                        return false\n                } else {\n                    return true\n                }\n            },\n            checkDiag(i) {\n                let rightDiag = [3,5,7]\n                let leftDiag = [1,5,9]\n                let isRightWin = false\n                let isLeftWin = false\n                let limit = 10\n                let rightLim = 8\n                let rightDiff = 2\n                let leftDiff = 4\n\n                if (rightDiag.includes(i)) {\n                    isRightWin = this.checkLine(i, rightDiff, rightLim)\n                }\n\n                if (leftDiag.includes(i)) {\n                    isLeftWin = this.checkLine(i, leftDiff, limit)\n                }\n\n                return isRightWin || isLeftWin\n\n            },\n            checkWin(i) { \n                let rowLimit = i + (i*5)%3 + 1\n                let colLimit = i + 7\n\n                let isRowWin = this.checkLine(i, 1, rowLimit)\n                let isColWin = this.checkLine(i, 3, colLimit)\n                let isDiagWin = this.checkDiag(i)\n                if (isRowWin || isColWin || isDiagWin) {\n                    return true\n                } else {\n                    return false\n                }\n            }, \n            announceWinner() {\n                this.isWin = true\n                if (this.isPlayer1) {\n                    this.winningPlayer = \"Player 1\"\n                } else {\n                    this.winningPlayer = \"Player 2\"\n                }\n            }, showTieMessage() {\n                this.isTie = true\n                let messageNode = document.getElementById(\"finalMessage\")\n                let text = document.createElement(\"p\")\n                text.innerHTML = \"TEST\"\n                messageNode.appendChild(text)\n            },\n            fillPlayerSign(i) {\n                console.log(this.numTurns)\n                if (this.isWin === false && this.numTurns < 10) {\n                    this.setImage()\n                    let imgId = 'img'+ i\n                    let imgNode = document.getElementById(imgId)\n                    let boxNode = document.getElementById(i)\n                    let existingImg = boxNode.contains(imgNode)\n\n                    if (existingImg === false) {\n                        /* if there is no previous image in the box, add an image */\n                        let newImg = document.createElement(\"img\")\n                        newImg.src = this.img\n                        newImg.style.width = '100%'\n                        newImg.id = imgId\n                        boxNode.appendChild(newImg)\n                        \n                        if (this.numTurns > 4) {                            \n                            if (this.checkWin(i)) {\n                                this.announceWinner()\n                            } \n                            if (this.isWin === false && this.numTurns === 9) {\n                                this.showTieMessage()\n                            }\n                        }\n                        \n                        this.numTurns += 1\n                        this.isPlayer1 = !this.isPlayer1\n                        \n                    }\n                } else if (this.numTurns == 10 ) {\n                    console.log(\"HERE\")\n                    this.showTieMessage()\n\n                } else {\n                    console.log(\"TEST\")\n                    console.log(this.numTurns)\n                }\n                \n            }\n        }\n    }\n    </script>\n    \n  <!-- Add \"scoped\" attribute to limit CSS to this component only width: 9vh;-->\n  <style scoped>\n\n    .game--container {\n        display: grid;\n        grid-template-columns: repeat(3, auto);\n        width: 50%;\n        margin-right: auto;\n        margin-left: auto;\n    }\n    .cell {\n        aspect-ratio: 1 / 1;\n        width: 8vh;\n        box-shadow: 0 0 0 1px #333333;\n        border: 1px solid #333333;\n        cursor: pointer;\n    }\n    h5 {\n        text-align: center;\n        padding-top: 5%;\n    }\n    #button {\n        background-color: aquamarine;\n\n    }\n\n  </style>\n  "]},"metadata":{},"sourceType":"module"}